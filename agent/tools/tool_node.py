import json
import logging

from langchain_core.messages import ToolMessage


class ToolNode:
    """A node that runs the tools requested in the last AIMessage."""

    def __init__(self, tools: list) -> None:
        self.tools_by_name = {tool.name: tool for tool in tools}

    async def __call__(self, inputs: dict):
        if messages := inputs.get("messages", []):
            message = messages[-1]
        else:
            raise ValueError("No message found in input")

        if not hasattr(message, "tool_calls"):
            return {"messages": []}

        outputs = []
        for tool_call in message.tool_calls:
            try:
                # Check if the tool supports async invocation
                if hasattr(self.tools_by_name[tool_call["name"]], "ainvoke"):
                    tool_result = await self.tools_by_name[tool_call["name"]].ainvoke(
                        tool_call["args"]
                    )
                else:
                    raise NotImplementedError(
                        f"Tool '{tool_call['name']}' does not support async invocation."
                    )

                outputs.append(
                    ToolMessage(
                        content=json.dumps(tool_result),
                        name=tool_call["name"],
                        tool_call_id=tool_call["id"],
                    )
                )
            except Exception as e:
                print("Error invoking tool '%s': %s", tool_call["name"], e)

        if not outputs:
            print("No outputs were generated by the tools.")
            return {"messages": [ToolMessage(content="No results found.", name="system", tool_call_id="none")]}

        return {"messages": outputs}


